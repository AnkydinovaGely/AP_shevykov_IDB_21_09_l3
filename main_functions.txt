Функции для работы с регулярками живут в модуле re. 

Так как символ \ в питоновских строках также необходимо экранировать, то в результате в шаблонах могут возникать конструкции вида '\\\\par'. 
Первый слеш означает, что следующий за ним символ нужно оставить «как есть». Третий также.
В результате с точки зрения питона '\\\\' означает просто два слеша \\.
Теперь с точки зрения движка регулярных выражений, первый слеш экранирует второй.
Тем самым как шаблон для регулярки '\\\\par' означает просто текст \par.
Для того, чтобы не было таких нагромождений слешей, перед открывающей кавычкой нужно поставить символ r,
что скажет питону «не рассматривай \ как экранирующий символ (кроме случаев экранирования открывающей кавычки)».
Соответственно можно будет писать r'\\par'.

Основные функции:

re.search(pattern, string)	
Найти в строке string первую строчку, подходящую под шаблон pattern;

re.fullmatch(pattern, string)
Проверить, подходит ли строка string под шаблон pattern;

re.split(pattern, string, maxsplit=0)
Аналог str.split(), только разделение происходит по подстрокам, подходящим под шаблон pattern;

re.findall(pattern, string)
Найти в строке string все непересекающиеся шаблоны pattern;

re.finditer(pattern, string)
Итератор всем непересекающимся шаблонам pattern в строке string (выдаются match-объекты);

re.sub(pattern, repl, string, count=0)
Заменить в строке string все непересекающиеся шаблоны pattern на repl;

Константа	и её смысл:
re.ASCII
По умолчанию \w, \W, \b, \B, \d, \D, \s, \S соответствуют
все юникодные символы с соответствующим качеством.
Например, \d соответствуют не только арабские цифры,
но и вот такие: ٠١٢٣٤٥٦٧٨٩.

re.ASCII ускоряет работу,
если все соответствия лежат внутри ASCII.

re.IGNORECASE	Не различать заглавные и маленькие буквы.
Работает медленнее, но иногда удобно

re.MULTILINE	Специальные символы ^ и $ соответствуют
началу и концу каждой строки

re.DOTALL	По умолчанию символ \n конца строки не подходит под точку.
С этим флагом точка — вообще любой символ
